void new_testgraph01() {
  string name = "graph01";

  DGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B');
  model.connect('A', 'B', 5);
  model.connect('B', 'D');
  model.connect('C', 'B');
  model.connect('C', 'D');
  //! expect ----------------------------------
  string expect =
      "==================================================\n\
Vertices:   \n\
V(A, in: 0, out: 1)\n\
V(B, in: 2, out: 1)\n\
V(C, in: 0, out: 2)\n\
V(D, in: 2, out: 0)\n\
------------------------------\n\
Edges:      \n\
E(A,B,5)\n\
E(B,D,0)\n\
E(C,B,0)\n\
E(C,D,0)\n\
==================================================\n";

  cout << model.toString();

  model.clear();
}



void new_testgraph02() {
  string name = "graph02";

  UGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B');
  model.connect('A', 'B', 5);
  model.connect('B', 'D');
  model.connect('C', 'B');
  model.connect('C', 'D');

  //! expect ----------------------------------
  string expect =
      "==================================================\n\
Vertices:   \n\
V(A, in: 1, out: 1)\n\
V(B, in: 3, out: 3)\n\
V(C, in: 2, out: 2)\n\
V(D, in: 2, out: 2)\n\
------------------------------\n\
Edges:      \n\
E(A,B,5)\n\
E(B,A,5)\n\
E(B,D,0)\n\
E(B,C,0)\n\
E(C,B,0)\n\
E(C,D,0)\n\
E(D,B,0)\n\
E(D,C,0)\n\
==================================================\n";



  cout << model.toString();

  model.clear();


}



void new_testgraph03() {
  string name = "graph03";
  stringstream output;

  DGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D', 'E'};
  for (int idx = 0; idx < 5; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B', 8);
  model.connect('B', 'D', 6);
  model.connect('C', 'B', 1);
  model.connect('C', 'D', 2);
  model.connect('E', 'A', 3);
  model.connect('E', 'B', 4);
  model.connect('E', 'C', 5);
  DLinkedList<char> out = model.getOutwardEdges('E');
  DLinkedList<char> in = model.getInwardEdges('B');
  cout << "getOutwardEdges : E: ";
  for (auto it = out.begin(); it != out.end(); it++) {
    cout << *it << "-> ";
  }
  cout << "NULL\n";

  cout << "getInwardEdges : B: ";
  for (auto it = in.begin(); it != in.end(); it++) {
    cout << *it << "-> ";
  }
  cout << "NULL\n";
  //! expect ----------------------------------
  string expect =
      "getOutwardEdges : E: A-> B-> C-> NULL\n\
getInwardEdges : B: A-> C-> E-> NULL\n\
==================================================\n\
Vertices:   \n\
V(A, in: 1, out: 1)\n\
V(B, in: 3, out: 1)\n\
V(C, in: 1, out: 2)\n\
V(D, in: 2, out: 0)\n\
V(E, in: 0, out: 3)\n\
------------------------------\n\
Edges:      \n\
E(A,B,8)\n\
E(B,D,6)\n\
E(C,B,1)\n\
E(C,D,2)\n\
E(E,A,3)\n\
E(E,B,4)\n\
E(E,C,5)\n\
==================================================\n";

  //! output ----------------------------------

  cout << model.toString();

  model.clear();


}


void new_testgraph04() {
  string name = "graph04";
  stringstream output;

  UGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D', 'E'};
  for (int idx = 0; idx < 5; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B', 8);
  model.connect('B', 'D', 6);
  model.connect('C', 'B', 1);
  model.connect('C', 'D', 2);
  model.connect('E', 'A', 3);
  model.connect('E', 'B', 4);
  model.connect('E', 'C', 5);
  model.connect('E', 'E', 5);
  DLinkedList<char> out = model.getOutwardEdges('E');
  DLinkedList<char> in = model.getInwardEdges('B');
  cout << "getOutwardEdges : E: ";
  for (auto it = out.begin(); it != out.end(); it++) {
    cout << *it << "-> ";
  }
  cout << "NULL\n";

  cout << "getInwardEdges : B: ";
  for (auto it = in.begin(); it != in.end(); it++) {
    cout << *it << "-> ";
  }
  cout << "NULL\n";
  //! expect ----------------------------------
  string expect =
      "getOutwardEdges : E: A-> B-> C-> E-> NULL\n\
getInwardEdges : B: A-> C-> D-> E-> NULL\n\
==================================================\n\
Vertices:   \n\
V(A, in: 2, out: 2)\n\
V(B, in: 4, out: 4)\n\
V(C, in: 3, out: 3)\n\
V(D, in: 2, out: 2)\n\
V(E, in: 4, out: 4)\n\
------------------------------\n\
Edges:      \n\
E(A,B,8)\n\
E(A,E,3)\n\
E(B,A,8)\n\
E(B,D,6)\n\
E(B,C,1)\n\
E(B,E,4)\n\
E(C,B,1)\n\
E(C,D,2)\n\
E(C,E,5)\n\
E(D,B,6)\n\
E(D,C,2)\n\
E(E,A,3)\n\
E(E,B,4)\n\
E(E,C,5)\n\
E(E,E,5)\n\
==================================================\n";

  //! output ----------------------------------

  cout << model.toString();

  model.clear();


}


void new_testgraph05() {
  string name = "graph05";
  stringstream output;

  char vertices[] = {'A', 'B', 'C', 'D'};

  // Định nghĩa các cạnh
  Edge<char> edges[3] = {Edge<char>('A', 'B', 1.5), Edge<char>('B', 'C', 2.0),
                         Edge<char>('C', 'D', 3.2)};
  DGraphModel<char> *model = DGraphModel<char>::create(
      vertices, 4, edges, 3, &charComparator, &vertex2str);

  try {
    // Gọi một phương thức có thể ném ngoại lệ
    DLinkedList<char> out = model->getOutwardEdges('E');
  } catch (const VertexNotFoundException &e) {
    // Xử lý ngoại lệ nếu đỉnh không tìm thấy
    cout << "Error: " << "getOutwardEdges :E khong ton tai"
           << endl;  // In ra thông báo lỗi
  }
  DLinkedList<char> in = model->getInwardEdges('B');

  cout << "getInwardEdges : B: ";
  for (auto it = in.begin(); it != in.end(); it++) {
    cout << *it << "-> ";
  }
  cout << "NULL\n";
  //! expect ----------------------------------
  string expect =
      "Error: getOutwardEdges :E khong ton tai\n\
getInwardEdges : B: A-> NULL\n\
==================================================\n\
Vertices:   \n\
V(A, in: 0, out: 1)\n\
V(B, in: 1, out: 1)\n\
V(C, in: 1, out: 1)\n\
V(D, in: 1, out: 0)\n\
------------------------------\n\
Edges:      \n\
E(A,B,1.5)\n\
E(B,C,2)\n\
E(C,D,3.2)\n\
==================================================\n";

  //! output ----------------------------------
  cout << model->toString();

  model->clear();
  delete model;


}


void new_testgraph06() {
  string name = "graph06";
  stringstream output;

  char vertices[] = {'A', 'B', 'C', 'D'};

  // Định nghĩa các cạnh
  Edge<char> edges[3] = {Edge<char>('A', 'B', 1.5), Edge<char>('B', 'C', 2.0),
                         Edge<char>('C', 'D', 3.2)};
  UGraphModel<char> *model = UGraphModel<char>::create(
      vertices, 4, edges, 3, &charComparator, &vertex2str);

  try {
    // Gọi một phương thức có thể ném ngoại lệ
    DLinkedList<char> out = model->getOutwardEdges('E');
  } catch (const VertexNotFoundException &e) {
    // Xử lý ngoại lệ nếu đỉnh không tìm thấy
    cout << "Error: " << "getOutwardEdges :E khong ton tai"
           << endl;  // In ra thông báo lỗi
  }
  DLinkedList<char> in = model->getInwardEdges('B');

  cout << "getInwardEdges : B: ";
  for (auto it = in.begin(); it != in.end(); it++) {
    cout << *it << "-> ";
  }
  cout << "NULL\n";
  //! expect ----------------------------------
  string expect =
      "Error: getOutwardEdges :E khong ton tai\n\
getInwardEdges : B: A-> C-> NULL\n\
==================================================\n\
Vertices:   \n\
V(A, in: 1, out: 1)\n\
V(B, in: 2, out: 2)\n\
V(C, in: 2, out: 2)\n\
V(D, in: 1, out: 1)\n\
------------------------------\n\
Edges:      \n\
E(A,B,1.5)\n\
E(B,A,1.5)\n\
E(B,C,2)\n\
E(C,B,2)\n\
E(C,D,3.2)\n\
E(D,C,3.2)\n\
==================================================\n";

  //! output ----------------------------------
  cout << model->toString();

  model->clear();
  delete model;


}


void new_testgraph07() {
  string name = "graph07";
  stringstream output;

  char vertices[] = {'A', 'B', 'C', 'D'};

  // Định nghĩa các cạnh
  Edge<char> edges[4] = {Edge<char>('A', 'B', 1.5), Edge<char>('B', 'C', 2.0),
                         Edge<char>('C', 'D', 3.2), Edge<char>('D', 'D', 3.2)};
  UGraphModel<char> *model = UGraphModel<char>::create(
      vertices, 4, edges, 4, &charComparator, &vertex2str);

  try {
    // Gọi một phương thức có thể ném ngoại lệ
    model->weight('A', 'D');
  } catch (const EdgeNotFoundException &e) {
    // Xử lý ngoại lệ nếu đỉnh không tìm thấy
    cout << "Error: " << "AB khong ton tai" << endl;  // In ra thông báo lỗi
  }
  try {
    // Gọi một phương thức có thể ném ngoại lệ
    model->weight('E', 'D');
  } catch (const VertexNotFoundException &e) {
    // Xử lý ngoại lệ nếu đỉnh không tìm thấy
    cout << "Error: " << "E khong ton tai" << endl;  // In ra thông báo lỗi
  }

  try {
    // Gọi một phương thức có thể ném ngoại lệ
    model->weight('D', 'F');
  } catch (const VertexNotFoundException &e) {
    // Xử lý ngoại lệ nếu đỉnh không tìm thấy
    cout << "Error: " << "F khong ton tai" << endl;  // In ra thông báo lỗi
  }
  cout << "AB : " << model->weight('A', 'B') << endl;
  cout << "CD : " << model->weight('C', 'D') << endl;

  DLinkedList<char> in = model->getInwardEdges('D');

  cout << "getInwardEdges : D: ";
  for (auto it = in.begin(); it != in.end(); it++) {
    cout << *it << "-> ";
  }
  cout << "NULL\n";
  //! expect ----------------------------------
  string expect =
      "Error: AB khong ton tai\n\
Error: E khong ton tai\n\
Error: F khong ton tai\n\
AB : 1.5\n\
CD : 3.2\n\
getInwardEdges : D: C-> D-> NULL\n\
==================================================\n\
Vertices:   \n\
V(A, in: 1, out: 1)\n\
V(B, in: 2, out: 2)\n\
V(C, in: 2, out: 2)\n\
V(D, in: 2, out: 2)\n\
------------------------------\n\
Edges:      \n\
E(A,B,1.5)\n\
E(B,A,1.5)\n\
E(B,C,2)\n\
E(C,B,2)\n\
E(C,D,3.2)\n\
E(D,C,3.2)\n\
E(D,D,3.2)\n\
==================================================\n";

  //! output ----------------------------------
  cout << model->toString();

  model->clear();
  delete model;


}


void new_testgraph08() {
  string name = "graph08";
  stringstream output;

  char vertices[] = {'A', 'B', 'C', 'D'};

  // Định nghĩa các cạnh
  Edge<char> edges[5] = {Edge<char>('A', 'B', 1.5), Edge<char>('A', 'A', 10),
                         Edge<char>('B', 'C', 2.0), Edge<char>('C', 'D', 3.2),
                         Edge<char>('D', 'D', 3.2)};
  DGraphModel<char> *model = DGraphModel<char>::create(
      vertices, 4, edges, 5, &charComparator, &vertex2str);

  try {
    // Gọi một phương thức có thể ném ngoại lệ
    model->weight('A', 'D');
  } catch (const EdgeNotFoundException &e) {
    // Xử lý ngoại lệ nếu đỉnh không tìm thấy
    cout << "Error: " << "AB khong ton tai" << endl;  // In ra thông báo lỗi
  }
  try {
    // Gọi một phương thức có thể ném ngoại lệ
    model->weight('E', 'D');
  } catch (const VertexNotFoundException &e) {
    // Xử lý ngoại lệ nếu đỉnh không tìm thấy
    cout << "Error: " << "E khong ton tai" << endl;  // In ra thông báo lỗi
  }

  try {
    // Gọi một phương thức có thể ném ngoại lệ
    model->weight('D', 'F');
  } catch (const VertexNotFoundException &e) {
    // Xử lý ngoại lệ nếu đỉnh không tìm thấy
    cout << "Error: " << "F khong ton tai" << endl;  // In ra thông báo lỗi
  }
  cout << "AA : " << model->weight('A', 'A') << endl;
  cout << "CD : " << model->weight('C', 'D') << endl;

  DLinkedList<char> in = model->getInwardEdges('D');

  cout << "getInwardEdges : D: ";
  for (auto it = in.begin(); it != in.end(); it++) {
    cout << *it << "-> ";
  }
  cout << "NULL\n";
  //! expect ----------------------------------
  string expect =
      "Error: AB khong ton tai\n\
Error: E khong ton tai\n\
Error: F khong ton tai\n\
AA : 10\n\
CD : 3.2\n\
getInwardEdges : D: C-> D-> NULL\n\
==================================================\n\
Vertices:   \n\
V(A, in: 1, out: 2)\n\
V(B, in: 1, out: 1)\n\
V(C, in: 1, out: 1)\n\
V(D, in: 2, out: 1)\n\
------------------------------\n\
Edges:      \n\
E(A,B,1.5)\n\
E(A,A,10)\n\
E(B,C,2)\n\
E(C,D,3.2)\n\
E(D,D,3.2)\n\
==================================================\n";

  //! output ----------------------------------
  cout << model->toString();

  model->clear();
  delete model;


}

void new_testgraph09() {
  string name = "graph09";
  stringstream output;

  char vertices[] = {'A', 'B', 'C', 'D'};

  // Định nghĩa các cạnh
  Edge<char> edges[5] = {Edge<char>('A', 'B', 1.5), Edge<char>('A', 'A', 10),
                         Edge<char>('B', 'C', 2.0), Edge<char>('C', 'D', 3.2),
                         Edge<char>('D', 'D', 3.2)};
  DGraphModel<char> *model = DGraphModel<char>::create(
      vertices, 4, edges, 5, &charComparator, &vertex2str);
  model->remove('A');
  model->remove('B');
  DLinkedList<char> in = model->getInwardEdges('D');

  cout << "getInwardEdges : D: ";
  for (auto it = in.begin(); it != in.end(); it++) {
    cout << *it << "-> ";
  }
  cout << "NULL\n";
  //! expect ----------------------------------
  string expect =
      "getInwardEdges : D: C-> D-> NULL\n\
==================================================\n\
Vertices:   \n\
V(C, in: 0, out: 1)\n\
V(D, in: 2, out: 1)\n\
------------------------------\n\
Edges:      \n\
E(C,D,3.2)\n\
E(D,D,3.2)\n\
==================================================\n";

  //! output ----------------------------------
  cout << model->toString();

  model->clear();
  delete model;


}


void new_testgraph10() {
  string name = "graph10";
  stringstream output;

  char vertices[] = {'A', 'B', 'C', 'D'};

  // Định nghĩa các cạnh
  Edge<char> edges[5] = {Edge<char>('A', 'B', 1.5), Edge<char>('A', 'A', 10),
                         Edge<char>('B', 'C', 2.0), Edge<char>('C', 'D', 3.2),
                         Edge<char>('D', 'D', 3.2)};
  UGraphModel<char> *model = UGraphModel<char>::create(
      vertices, 4, edges, 5, &charComparator, &vertex2str);
  model->remove('B');
  model->remove('D');
  //! expect ----------------------------------
  string expect =
      "==================================================\n\
Vertices:   \n\
V(A, in: 1, out: 1)\n\
V(C, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
E(A,A,10)\n\
==================================================\n";

  //! output ----------------------------------
  cout << model->toString();

  model->clear();
  delete model;
}


void new_testgraph11() {
  string name = "graph11";
  stringstream output;

  char vertices[] = {'A', 'B', 'C', 'D'};

  // Định nghĩa các cạnh
  Edge<char> edges[5] = {Edge<char>('A', 'B', 1.5), Edge<char>('A', 'A', 10),
                         Edge<char>('B', 'C', 2.0), Edge<char>('C', 'D', 3.2),
                         Edge<char>('D', 'D', 3.2)};
  UGraphModel<char> *model = UGraphModel<char>::create(
      vertices, 4, edges, 5, &charComparator, &vertex2str);
  cout << "Size: " << model->size() << endl;
  cout << "Indegree: " << model->inDegree('A') << endl;
  cout << "Outdegree: " << model->outDegree('A') << endl;
  model->remove('A');
  model->remove('B');
  model->remove('C');
  model->remove('D');
  cout << "Size: " << model->size() << endl;
  try {
    model->inDegree('F');
  } catch (const VertexNotFoundException &e) {
    cout << "Error: " << "F khong ton tai" << endl;
  }
  try {
    model->outDegree('F');
  } catch (const VertexNotFoundException &e) {
    cout << "Error: " << "F khong ton tai" << endl;
  }
  //! expect ----------------------------------
  string expect =
      "Size: 4\n\
Indegree: 2\n\
Outdegree: 2\n\
Size: 0\n\
Error: F khong ton tai\n\
Error: F khong ton tai\n\
==================================================\n\
Vertices:   \n\
------------------------------\n\
Edges:      \n\
==================================================\n";

  //! output ----------------------------------
  cout << model->toString();

  model->clear();
  delete model;


}


void new_testgraph12() {
  string name = "graph12";
  stringstream output;

  char vertices[] = {'A', 'B', 'C', 'D'};

  // Định nghĩa các cạnh
  Edge<char> edges[5] = {Edge<char>('A', 'B', 1.5), Edge<char>('A', 'A', 10),
                         Edge<char>('B', 'C', 2.0), Edge<char>('C', 'D', 3.2),
                         Edge<char>('D', 'D', 3.2)};
  DGraphModel<char> *model = DGraphModel<char>::create(
      vertices, 4, edges, 5, &charComparator, &vertex2str);
  cout << "Size: " << model->size() << endl;
  cout << "vertices: ";
  DLinkedList<char> a = model->vertices();
  for (auto it = a.begin(); it != a.end(); ++it) {
    cout << *it << " ";
  }
  cout << "\n";
  cout << "Indegree: " << model->inDegree('A') << endl;
  cout << "Outdegree: " << model->outDegree('A') << endl;
  model->remove('A');
  model->remove('B');
  model->remove('C');
  model->remove('D');
  cout << "Size: " << model->size() << endl;
  try {
    model->inDegree('F');
  } catch (const VertexNotFoundException &e) {
    cout << "Error: " << "F khong ton tai" << endl;
  }
  try {
    model->outDegree('F');
  } catch (const VertexNotFoundException &e) {
    cout << "Error: " << "F khong ton tai" << endl;
  }
  //! expect ----------------------------------
  string expect =
      "Size: 4\n\
vertices: A B C D \n\
Indegree: 1\n\
Outdegree: 2\n\
Size: 0\n\
Error: F khong ton tai\n\
Error: F khong ton tai\n\
==================================================\n\
Vertices:   \n\
------------------------------\n\
Edges:      \n\
==================================================\n";

  //! output ----------------------------------
  cout << model->toString();

  model->clear();
  delete model;


}

void new_testgraph13() {
  string name = "graph13";
  stringstream output;

  char vertices[] = {'A', 'B', 'C', 'D', 'E', 'F', 'H', 'G'};

  // Định nghĩa các cạnh
  Edge<char> edges[6] = {Edge<char>('A', 'B', 1.5), Edge<char>('A', 'A', 10),
                         Edge<char>('B', 'C', 2.0), Edge<char>('B', 'B', 2.0),
                         Edge<char>('C', 'D', 3.2), Edge<char>('D', 'D', 3.2)};
  DGraphModel<char> *model = DGraphModel<char>::create(
      vertices, 8, edges, 6, &charComparator, &vertex2str);
  cout << "Size: " << model->size() << endl;
  cout << "vertices: ";
  DLinkedList<char> a = model->vertices();
  for (auto it = a.begin(); it != a.end(); ++it) {
    cout << *it << " ";
  }
  cout << "\n";
  cout << "Indegree H: " << model->inDegree('H') << endl;
  cout << "Outdegree C: " << model->outDegree('C') << endl;
  model->remove('F');
  model->remove('B');
  model->remove('H');
  model->remove('G');
  cout << "Size: " << model->size() << endl;
  //! expect ----------------------------------
  string expect =
      "Size: 8\n\
vertices: A B C D E F H G \n\
Indegree H: 0\n\
Outdegree C: 1\n\
Size: 4\n\
==================================================\n\
Vertices:   \n\
V(A, in: 1, out: 1)\n\
V(C, in: 0, out: 1)\n\
V(D, in: 2, out: 1)\n\
V(E, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
E(A,A,10)\n\
E(C,D,3.2)\n\
E(D,D,3.2)\n\
==================================================\n";

  //! output ----------------------------------
  cout << model->toString();

  model->clear();
  delete model;


}


void new_testgraph14() {
  string name = "graph14";
  stringstream output;

  char vertices[] = {'A', 'B', 'C', 'D', 'E', 'F', 'H', 'G'};

  // Định nghĩa các cạnh
  Edge<char> edges[6] = {Edge<char>('A', 'B', 1.5), Edge<char>('A', 'A', 10),
                         Edge<char>('B', 'C', 2.0), Edge<char>('B', 'B', 2.0),
                         Edge<char>('C', 'D', 3.2), Edge<char>('D', 'D', 3.2)};
  UGraphModel<char> *model = UGraphModel<char>::create(
      vertices, 8, edges, 6, &charComparator, &vertex2str);
  cout << "Size: " << model->size() << endl;
  cout << "vertices: ";
  DLinkedList<char> a = model->vertices();
  for (auto it = a.begin(); it != a.end(); ++it) {
    cout << *it << " ";
  }
  cout << "\n";
  cout << "Indegree H: " << model->inDegree('H') << endl;
  cout << "Outdegree C: " << model->outDegree('C') << endl;
  cout << "connected AA : " << model->connected('A', 'A') << endl;
  cout << "connected AH : " << model->connected('A', 'H') << endl;
  try {
    // Gọi một phương thức có thể ném ngoại lệ
    model->connected('A', 'X');
  } catch (const VertexNotFoundException &e) {
    // Xử lý ngoại lệ nếu đỉnh không tìm thấy
    cout << "Error: " << "X khong ton tai" << endl;  // In ra thông báo lỗi
  }
  try {
    // Gọi một phương thức có thể ném ngoại lệ
    model->connected('V', 'Q');
  } catch (const VertexNotFoundException &e) {
    // Xử lý ngoại lệ nếu đỉnh không tìm thấy
    cout << "Error: " << "V khong ton tai" << endl;  // In ra thông báo lỗi
  }
  cout << "Size: " << model->size() << endl;
  //! expect ----------------------------------
  string expect =
      "Size: 8\n\
vertices: A B C D E F H G \n\
Indegree H: 0\n\
Outdegree C: 2\n\
connected AA : 1\n\
connected AH : 0\n\
Error: X khong ton tai\n\
Error: V khong ton tai\n\
Size: 8\n\
==================================================\n\
Vertices:   \n\
V(A, in: 2, out: 2)\n\
V(B, in: 3, out: 3)\n\
V(C, in: 2, out: 2)\n\
V(D, in: 2, out: 2)\n\
V(E, in: 0, out: 0)\n\
V(F, in: 0, out: 0)\n\
V(H, in: 0, out: 0)\n\
V(G, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
E(A,B,1.5)\n\
E(A,A,10)\n\
E(B,A,1.5)\n\
E(B,C,2)\n\
E(B,B,2)\n\
E(C,B,2)\n\
E(C,D,3.2)\n\
E(D,C,3.2)\n\
E(D,D,3.2)\n\
==================================================\n";

  //! output ----------------------------------
  cout << model->toString();

  model->clear();
  delete model;


}

void new_testgraph15() {
  string name = "graph15";
  stringstream output;

  char vertices[] = {'A', 'B', 'C', 'D', 'E', 'F', 'H', 'G'};

  // Định nghĩa các cạnh
  Edge<char> edges[6] = {Edge<char>('A', 'B', 1.5), Edge<char>('A', 'A', 10),
                         Edge<char>('B', 'C', 2.0), Edge<char>('B', 'B', 2.0),
                         Edge<char>('C', 'D', 3.2), Edge<char>('D', 'D', 3.2)};
  UGraphModel<char> *model = UGraphModel<char>::create(
      vertices, 8, edges, 6, &charComparator, &vertex2str);
  cout << "Size: " << model->size() << endl;
  cout << "Indegree H: " << model->inDegree('H') << endl;
  cout << "Outdegree C: " << model->outDegree('C') << endl;
  cout << "contains C : " << model->contains('C') << endl;
  cout << "contains J : " << model->contains('J') << endl;
  cout << "Size: " << model->size() << endl;
  //! expect ----------------------------------
  string expect =
      "Size: 8\n\
Indegree H: 0\n\
Outdegree C: 2\n\
contains C : 1\n\
contains J : 0\n\
Size: 8\n\
==================================================\n\
Vertices:   \n\
V(A, in: 2, out: 2)\n\
V(B, in: 3, out: 3)\n\
V(C, in: 2, out: 2)\n\
V(D, in: 2, out: 2)\n\
V(E, in: 0, out: 0)\n\
V(F, in: 0, out: 0)\n\
V(H, in: 0, out: 0)\n\
V(G, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
E(A,B,1.5)\n\
E(A,A,10)\n\
E(B,A,1.5)\n\
E(B,C,2)\n\
E(B,B,2)\n\
E(C,B,2)\n\
E(C,D,3.2)\n\
E(D,C,3.2)\n\
E(D,D,3.2)\n\
==================================================\n\
==================================================\n\
Vertices:   \n\
------------------------------\n\
Edges:      \n\
==================================================\n";

  //! output ----------------------------------
  cout << model->toString();
  model->clear();
  cout << model->toString();

  model->clear();
  delete model;


}

void new_testgraph16() {
  string name = "graph16";

  DGraphModel<char> model(&charComparator, &vertex2str);

  //! expect ----------------------------------
  string expect =
      "==================================================\n\
Vertices:   \n\
------------------------------\n\
Edges:      \n\
==================================================\n";


  cout << model.toString();

  model.clear();


}


void new_testgraph18() {
  string name = "graph18";

  UGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B');
  model.connect('B', 'A');

  //! expect ----------------------------------
  string expect =
      "1 1\n\
==================================================\n\
Vertices:   \n\
V(A, in: 1, out: 1)\n\
V(B, in: 1, out: 1)\n\
V(C, in: 0, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
E(A,B,0)\n\
E(B,A,0)\n\
==================================================\n";


  cout << model.inDegree('A') << " " << model.outDegree('A') << endl;
  cout << model.toString();

  model.clear();


}


void new_testgraph19() {
  string name = "graph19";

  UGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B');
  model.disconnect('A', 'B');

  //! expect ----------------------------------
  string expect =
      "0 0\n\
==================================================\n\
Vertices:   \n\
V(A, in: 0, out: 0)\n\
V(B, in: 0, out: 0)\n\
V(C, in: 0, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
==================================================\n";


  cout << model.inDegree('A') << " " << model.outDegree('A') << endl;
  cout << model.toString();

  model.clear();


}


void new_testgraph20() {
  string name = "graph20";

  UGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B');
  model.disconnect('A', 'B');
  model.connect('A', 'B');
  model.disconnect('A', 'B');
  model.connect('A', 'B');
  model.disconnect('A', 'B');

  //! expect ----------------------------------
  string expect =
      "==================================================\n\
Vertices:   \n\
V(A, in: 0, out: 0)\n\
V(B, in: 0, out: 0)\n\
V(C, in: 0, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
==================================================\n";


  cout << model.toString();

  model.clear();


}


void new_testgraph21() {
  string name = "graph21";

  UGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B');
  model.add('A');
  model.add('B');

  //! expect ----------------------------------
  string expect =
      "==================================================\n\
Vertices:   \n\
V(A, in: 1, out: 1)\n\
V(B, in: 1, out: 1)\n\
V(C, in: 0, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
E(A,B,0)\n\
E(B,A,0)\n\
==================================================\n";


  cout << model.toString();

  model.clear();


}


void new_testgraph22() {
  string name = "graph22";

  UGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }

  //! expect ----------------------------------
  string expect =
      "1 0\n\
==================================================\n\
Vertices:   \n\
V(A, in: 0, out: 0)\n\
V(B, in: 0, out: 0)\n\
V(C, in: 0, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
==================================================\n";


  cout << model.contains('A') << " ";
  cout << model.contains('E') << endl;
  cout << model.toString();

  model.clear();


}


void new_testgraph23() {
  string name = "graph23";

  UGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B', 5);

  //! expect ----------------------------------
  string expect =
      "5\n\
Error: Vertex (X): is not found\n\
Error: Vertex (Y): is not found\n\
Error: Edge (E(A,C)): is not found\n\
==================================================\n\
Vertices:   \n\
V(A, in: 1, out: 1)\n\
V(B, in: 1, out: 1)\n\
V(C, in: 0, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
E(A,B,5)\n\
E(B,A,5)\n\
==================================================\n";


  cout << model.weight('A', 'B') << endl;

  try {
    model.weight('A', 'X');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  try {
    model.weight('Y', 'A');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  try {
    model.weight('A', 'C');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  cout << model.toString();

  model.clear();


}


void new_testgraph24() {
  string name = "graph24";

  DGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B', 5);
  model.connect('A', 'C', 1);
  DLinkedList<char> outwardEdgesA = model.getOutwardEdges('A');
  DLinkedList<char> outwardEdgesB = model.getOutwardEdges('B');

  //! expect ----------------------------------
  string expect =
      "outwardEdgesA: B C \n\
outwardEdgesB: \n\
Error: Vertex (X): is not found\n\
==================================================\n\
Vertices:   \n\
V(A, in: 0, out: 2)\n\
V(B, in: 1, out: 0)\n\
V(C, in: 1, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
E(A,B,5)\n\
E(A,C,1)\n\
==================================================\n";


  cout << "outwardEdgesA: ";
  for (auto v : outwardEdgesA) {
    cout << v << " ";
  }
  cout << endl;

  cout << "outwardEdgesB: ";
  for (auto v : outwardEdgesB) {
    cout << v << " ";
  }
  cout << endl;

  try {
    DLinkedList<char> outwardEdgesX = model.getOutwardEdges('X');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  cout << model.toString();

  model.clear();


}


void new_testgraph25() {
  string name = "graph25";

  DGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B', 5);
  model.connect('A', 'C', 1);
  DLinkedList<char> outwardEdgesA = model.getInwardEdges('A');
  DLinkedList<char> outwardEdgesB = model.getInwardEdges('B');

  //! expect ----------------------------------
  string expect =
      "getInwardEdgesA: \n\
getInwardEdgesB: A \n\
Error: Vertex (X): is not found\n\
==================================================\n\
Vertices:   \n\
V(A, in: 0, out: 2)\n\
V(B, in: 1, out: 0)\n\
V(C, in: 1, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
E(A,B,5)\n\
E(A,C,1)\n\
==================================================\n";


  cout << "getInwardEdgesA: ";
  for (auto v : outwardEdgesA) {
    cout << v << " ";
  }
  cout << endl;

  cout << "getInwardEdgesB: ";
  for (auto v : outwardEdgesB) {
    cout << v << " ";
  }
  cout << endl;

  try {
    DLinkedList<char> outwardEdgesX = model.getInwardEdges('X');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  cout << model.toString();

  model.clear();


}


void new_testgraph26() {
  string name = "graph26";

  DGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B', 5);
  model.connect('A', 'C', 1);

  //! expect ----------------------------------
  string expect =
      "0 1\n\
Error: Vertex (X): is not found\n\
==================================================\n\
Vertices:   \n\
V(A, in: 0, out: 2)\n\
V(B, in: 1, out: 0)\n\
V(C, in: 1, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
E(A,B,5)\n\
E(A,C,1)\n\
==================================================\n";


  cout << model.inDegree('A') << " " << model.inDegree('B') << endl;
  try {
    model.inDegree('X');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  cout << model.toString();

  model.clear();


}


void new_testgraph27() {
  string name = "graph27";

  DGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B', 5);
  model.connect('A', 'C', 1);

  //! expect ----------------------------------
  string expect =
      "2 0\n\
Error: Vertex (X): is not found\n\
==================================================\n\
Vertices:   \n\
V(A, in: 0, out: 2)\n\
V(B, in: 1, out: 0)\n\
V(C, in: 1, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
E(A,B,5)\n\
E(A,C,1)\n\
==================================================\n";


  cout << model.outDegree('A') << " " << model.outDegree('B') << endl;
  try {
    model.outDegree('X');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  cout << model.toString();

  model.clear();


}


void new_testgraph28() {
  string name = "graph28";

  UGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B', 5);

  //! expect ----------------------------------
  string expect =
      "1 0\n\
Error: Vertex (X): is not found\n\
Error: Vertex (Y): is not found\n\
==================================================\n\
Vertices:   \n\
V(A, in: 1, out: 1)\n\
V(B, in: 1, out: 1)\n\
V(C, in: 0, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
E(A,B,5)\n\
E(B,A,5)\n\
==================================================\n";


  cout << model.connected('A', 'B') << " " << model.connected('A', 'C')
         << endl;

  try {
    model.connected('A', 'X');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  try {
    model.connected('Y', 'A');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  cout << model.toString();

  model.clear();


}


void new_testgraph29() {
  string name = "graph29";

  DGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B');
  model.connect('A', 'B', 5);
  //! expect ----------------------------------
  string expect =
      "Error: Vertex (X): is not found\n\
Error: Vertex (Y): is not found\n\
==================================================\n\
Vertices:   \n\
V(A, in: 0, out: 1)\n\
V(B, in: 1, out: 0)\n\
V(C, in: 0, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
E(A,B,5)\n\
==================================================\n";



  try {
    model.connect('A', 'X');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  try {
    model.connect('Y', 'A');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  cout << model.toString();

  model.clear();


}


void new_testgraph30() {
  string name = "graph30";

  UGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B');
  model.connect('A', 'B', 5);
  //! expect ----------------------------------
  string expect =
      "Error: Vertex (X): is not found\n\
Error: Vertex (Y): is not found\n\
==================================================\n\
Vertices:   \n\
V(A, in: 1, out: 1)\n\
V(B, in: 1, out: 1)\n\
V(C, in: 0, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
E(A,B,5)\n\
E(B,A,5)\n\
==================================================\n";



  try {
    model.connect('A', 'X');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  try {
    model.connect('Y', 'A');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  cout << model.toString();

  model.clear();


}


void new_testgraph31() {
  string name = "graph31";

  DGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B', 5);
  model.disconnect('A', 'B');
  //! expect ----------------------------------
  string expect =
      "Error: Vertex (X): is not found\n\
Error: Vertex (Y): is not found\n\
Error: Edge (E(A,B)): is not found\n\
==================================================\n\
Vertices:   \n\
V(A, in: 0, out: 0)\n\
V(B, in: 0, out: 0)\n\
V(C, in: 0, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
==================================================\n";



  try {
    model.disconnect('A', 'X');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  try {
    model.disconnect('Y', 'A');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  try {
    model.disconnect('A', 'B');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  cout << model.toString();

  model.clear();


}


void new_testgraph32() {
  string name = "graph32";

  UGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B', 5);
  model.disconnect('A', 'B');
  //! expect ----------------------------------
  string expect =
      "Error: Vertex (X): is not found\n\
Error: Vertex (Y): is not found\n\
Error: Edge (E(A,B)): is not found\n\
==================================================\n\
Vertices:   \n\
V(A, in: 0, out: 0)\n\
V(B, in: 0, out: 0)\n\
V(C, in: 0, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
==================================================\n";



  try {
    model.disconnect('A', 'X');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  try {
    model.disconnect('Y', 'A');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  try {
    model.disconnect('A', 'B');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  cout << model.toString();

  model.clear();


}


void new_testgraph33() {
  string name = "graph33";

  UGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B');
  model.connect('A', 'C');
  model.connect('A', 'D');
  model.remove('B');
  model.remove('A');

  //! expect ----------------------------------
  string expect =
      "Error: Vertex (X): is not found\n\
==================================================\n\
Vertices:   \n\
V(C, in: 0, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
==================================================\n";



  try {
    model.remove('X');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  cout << model.toString();

  model.clear();
}


void new_testgraph34() {
  string name = "graph34";

  DGraphModel<char> model(&charComparator, &vertex2str);
  char vertices[] = {'A', 'B', 'C', 'D'};
  for (int idx = 0; idx < 4; idx++) {
    model.add(vertices[idx]);
  }
  model.connect('A', 'B');
  model.connect('A', 'C');
  model.connect('A', 'D');
  model.remove('B');
  model.remove('A');

  //! expect ----------------------------------
  string expect =
      "Error: Vertex (X): is not found\n\
==================================================\n\
Vertices:   \n\
V(C, in: 0, out: 0)\n\
V(D, in: 0, out: 0)\n\
------------------------------\n\
Edges:      \n\
==================================================\n";



  try {
    model.remove('X');
  } catch (const exception& e) {
    cout << "Error: " << string(e.what()) << endl;
  }

  cout << model.toString();

  model.clear();
}